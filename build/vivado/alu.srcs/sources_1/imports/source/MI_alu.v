/*
    This file was generated automatically by Alchitry Labs 2.0.11-PREVIEW.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/
module MI_alu (
    input [31:0] P_a,
    input [31:0] P_b,
    input [5:0] P_alufnSignal,
    output reg [31:0] P_out,
    output reg P_z,
    output reg P_v,
    output reg P_n
  );
  
  
  reg [31:0] arith;
  
  reg [31:0] M_adder_a;
  reg [31:0] M_adder_b;
  reg [5:0] M_adder_alufnSignal;
  wire [31:0] M_adder_out;
  wire M_adder_z;
  wire M_adder_v;
  wire M_adder_n;
  MI_adder_782e3138 adder (
    .P_a(M_adder_a),
    .P_b(M_adder_b),
    .P_alufnSignal(M_adder_alufnSignal),
    .P_out(M_adder_out),
    .P_z(M_adder_z),
    .P_v(M_adder_v),
    .P_n(M_adder_n)
  );
  reg [31:0] M_boolean_a;
  reg [31:0] M_boolean_b;
  reg [5:0] M_boolean_alufnSignal;
  wire [31:0] M_boolean_bool;
  MI_boolean_782e3138 boolean (
    .P_a(M_boolean_a),
    .P_b(M_boolean_b),
    .P_alufnSignal(M_boolean_alufnSignal),
    .P_bool(M_boolean_bool)
  );
  reg [31:0] M_shifter_a;
  reg [4:0] M_shifter_b;
  reg [5:0] M_shifter_alufnSignal;
  wire [31:0] M_shifter_shift;
  MI_shifter shifter (
    .P_a(M_shifter_a),
    .P_b(M_shifter_b),
    .P_alufnSignal(M_shifter_alufnSignal),
    .P_shift(M_shifter_shift)
  );
  reg M_compare_z;
  reg M_compare_v;
  reg M_compare_n;
  reg [5:0] M_compare_alufnSignal;
  wire M_compare_cmp;
  MI_compare compare (
    .P_z(M_compare_z),
    .P_v(M_compare_v),
    .P_n(M_compare_n),
    .P_alufnSignal(M_compare_alufnSignal),
    .P_cmp(M_compare_cmp)
  );
  reg [31:0] M_multiplier_a;
  reg [31:0] M_multiplier_b;
  wire [31:0] M_multiplier_mul;
  MI_multiplier multiplier (
    .P_a(M_multiplier_a),
    .P_b(M_multiplier_b),
    .P_mul(M_multiplier_mul)
  );
  
  always @* begin
    M_adder_a = P_a;
    M_adder_b = P_b;
    M_adder_alufnSignal = P_alufnSignal;
    M_multiplier_a = P_a;
    M_multiplier_b = P_b;
    M_boolean_a = P_a;
    M_boolean_b = P_b;
    M_boolean_alufnSignal = P_alufnSignal;
    M_shifter_a = P_a;
    M_shifter_b = P_b[(1'h0)+4-:5];
    M_shifter_alufnSignal = P_alufnSignal;
    M_compare_z = M_adder_z;
    M_compare_v = M_adder_v;
    M_compare_n = M_adder_n;
    P_z = M_adder_z;
    P_v = M_adder_v;
    P_n = M_adder_n;
    M_compare_alufnSignal = P_alufnSignal;
    arith = M_adder_out;
    if (P_alufnSignal[(1'h1)]) begin
      arith = M_multiplier_mul;
    end
    
    case (P_alufnSignal[(3'h4)+1-:2])
      2'h0: begin
        P_out = arith;
      end
      2'h1: begin
        P_out = M_boolean_bool;
      end
      2'h2: begin
        P_out = M_shifter_shift;
      end
      2'h3: begin
        P_out = {31'h0, M_compare_cmp};
      end
      default: begin
        P_out = 32'h0;
      end
    endcase
  end
  
endmodule