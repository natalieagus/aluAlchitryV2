/*
    This file was generated automatically by Alchitry Labs 2.0.11-PREVIEW.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/
/*
  Parameters:
      CLK_FREQ = {100110001001011010000000} : 10000000
*/
module MI_aluManualTester_7146de57 (
    input P_clk,
    input P_rst,
    input [4:0] P_ioButton,
    input [23:0] P_ioDip,
    output reg [23:0] P_ioLed,
    output reg [7:0] P_ioSeg,
    output reg [3:0] P_ioSel
  );
  localparam P_CLK_FREQ = 24'h989680;
  localparam E_States_STORE_A = 3'h0;
  localparam E_States_STORE_B = 3'h1;
  localparam E_States_STORE_ALUFN = 3'h2;
  localparam E_States_COMPUTE = 3'h3;
  localparam E_States_DISPLAY = 3'h4;
  
  reg [15:0] D_dffA_d, D_dffA_q = 16'h0;
  reg [15:0] D_dffB_d, D_dffB_q = 16'h0;
  reg [5:0] D_dffALUFN_d, D_dffALUFN_q = 6'h0;
  reg [1:0] D_indicatorState_d, D_indicatorState_q = 2'h3;
  reg [18:0] D_outputAlu_d, D_outputAlu_q = 19'h0;
  reg [2:0] D_state_d, D_state_q = 3'h4;
  
  
  reg [31:0] M_alu_a;
  reg [31:0] M_alu_b;
  reg [5:0] M_alu_alufnSignal;
  wire [31:0] M_alu_out;
  wire M_alu_z;
  wire M_alu_v;
  wire M_alu_n;
  MI_alu alu (
    .P_a(M_alu_a),
    .P_b(M_alu_b),
    .P_alufnSignal(M_alu_alufnSignal),
    .P_out(M_alu_out),
    .P_z(M_alu_z),
    .P_v(M_alu_v),
    .P_n(M_alu_n)
  );
  reg M_next_in;
  wire M_next_out;
  MI_buttonConditioner_f61aaa29 next (
    .P_clk(P_clk),
    .P_in(M_next_in),
    .P_out(M_next_out)
  );
  reg M_nextEdge_in;
  wire M_nextEdge_out;
  MI_edgeDetector_fe7d1ac7 nextEdge (
    .P_clk(P_clk),
    .P_in(M_nextEdge_in),
    .P_out(M_nextEdge_out)
  );
  reg [2:0] M_sevenSegAlu_char;
  wire [6:0] M_sevenSegAlu_segs;
  MI_sevenSegAlu sevenSegAlu (
    .P_char(M_sevenSegAlu_char),
    .P_segs(M_sevenSegAlu_segs)
  );
  
  always @* begin
    D_state_d = D_state_q;
    D_indicatorState_d = D_indicatorState_q;
    D_outputAlu_d = D_outputAlu_q;
    D_dffA_d = D_dffA_q;
    D_dffB_d = D_dffB_q;
    D_dffALUFN_d = D_dffALUFN_q;
    
    P_ioLed = 24'h0;
    M_next_in = P_ioButton[(1'h0)];
    M_nextEdge_in = M_next_out;
    D_state_d = D_state_q;
    D_indicatorState_d = D_indicatorState_q;
    D_outputAlu_d = D_outputAlu_q;
    if (M_nextEdge_out) begin
      
      case (D_state_q)
        3'h0: begin
          D_dffA_d = {P_ioDip[(1'h1)*8+7-:8], P_ioDip[(1'h0)*8+7-:8]};
          D_indicatorState_d = 2'h1;
          D_state_d = 3'h1;
        end
        3'h1: begin
          D_dffB_d = {P_ioDip[(1'h1)*8+7-:8], P_ioDip[(1'h0)*8+7-:8]};
          D_indicatorState_d = 2'h2;
          D_state_d = 3'h2;
        end
        3'h2: begin
          D_dffALUFN_d = P_ioDip[(2'h2)*8+(1'h0)+5-:6];
          D_indicatorState_d = 2'h3;
          D_state_d = 3'h3;
        end
        3'h3: begin
          D_outputAlu_d = {M_alu_z, M_alu_v, M_alu_n, M_alu_out[(1'h0)+15-:16]};
          D_state_d = 3'h4;
        end
        3'h4: begin
          D_indicatorState_d = 2'h0;
          D_outputAlu_d = 1'h0;
          D_state_d = 3'h0;
        end
      endcase
    end
    M_alu_a = D_dffA_q;
    M_alu_b = D_dffB_q;
    M_alu_alufnSignal = D_dffALUFN_q;
    P_ioLed[(1'h0)*8+15-:16] = {D_outputAlu_q[(4'h8)+7-:8], D_outputAlu_q[(1'h0)+7-:8]};
    P_ioLed[(2'h2)*8+(1'h0)+2-:3] = D_outputAlu_q[(5'h10)+2-:3];
    P_ioLed[(2'h2)*8+(3'h6)+1-:2] = D_indicatorState_q;
    if (P_ioButton[(1'h1)]) begin
      P_ioLed[(1'h0)*8+15-:16] = {D_dffA_q[(4'h8)+7-:8], D_dffA_q[(1'h0)+7-:8]};
    end else begin
      if (P_ioButton[(2'h2)]) begin
        P_ioLed[(1'h0)*8+15-:16] = {D_dffB_q[(4'h8)+7-:8], D_dffB_q[(1'h0)+7-:8]};
      end else begin
        if (P_ioButton[(2'h3)]) begin
          P_ioLed[(1'h0)*8+7-:8] = D_dffALUFN_q;
        end
      end
    end
    M_sevenSegAlu_char = D_state_q;
    P_ioSeg = ~M_sevenSegAlu_segs;
    P_ioSel = 4'he;
  end
  
  always @(posedge (P_clk)) begin
    D_state_q <= D_state_d;
    if ((P_rst) == 1'b1) begin
      D_dffA_q <= 16'h0;
      D_dffB_q <= 16'h0;
      D_dffALUFN_q <= 6'h0;
      D_indicatorState_q <= 2'h3;
      D_outputAlu_q <= 19'h0;
    end else begin
      D_dffA_q <= D_dffA_d;
      D_dffB_q <= D_dffB_d;
      D_dffALUFN_q <= D_dffALUFN_d;
      D_indicatorState_q <= D_indicatorState_d;
      D_outputAlu_q <= D_outputAlu_d;
    end
  end
endmodule