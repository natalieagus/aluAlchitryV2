/*
    This file was generated automatically by Alchitry Labs 2.0.19-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module rca #(
        parameter SIZE = 6'h20
    ) (
        input wire [(SIZE)-1:0] a,
        input wire [(SIZE)-1:0] b,
        input wire cin,
        output reg cout,
        output reg [(SIZE)-1:0] s
    );
    
    
    logic [31:0] R_0e95cec1_i;
    logic [31:0]RR_0e95cec1_i;
    
    logic [(SIZE)-1:0] M_fa_s;
    logic [(SIZE)-1:0] M_fa_cout;
    logic [(SIZE)-1:0] M_fa_a;
    logic [(SIZE)-1:0] M_fa_b;
    logic [(SIZE)-1:0] M_fa_cin;
    
    genvar idx_0_1175689706;
    
    generate
        for (idx_0_1175689706 = 0; idx_0_1175689706 < SIZE; idx_0_1175689706 = idx_0_1175689706 + 1) begin: forLoop_idx_0_1175689706
            fa fa (
                .s(M_fa_s[idx_0_1175689706]),
                .cout(M_fa_cout[idx_0_1175689706]),
                .a(M_fa_a[idx_0_1175689706]),
                .b(M_fa_b[idx_0_1175689706]),
                .cin(M_fa_cin[idx_0_1175689706])
            );
        end
    endgenerate
    
    
    always @* begin
        M_fa_a = a;
        M_fa_b = b;
        M_fa_cin = 1'h0;
        for (RR_0e95cec1_i = 0; RR_0e95cec1_i < SIZE; RR_0e95cec1_i = RR_0e95cec1_i + 1) begin
      R_0e95cec1_i = (0) + RR_0e95cec1_i * (1);
            if (R_0e95cec1_i == 1'h0) begin
                M_fa_cin[1'h0] = cin;
            end else begin
                M_fa_cin[R_0e95cec1_i] = M_fa_cout[R_0e95cec1_i - 1'h1];
            end
        end
        cout = M_fa_cout[SIZE - 1'h1];
        s = M_fa_s;
    end
    
endmodule