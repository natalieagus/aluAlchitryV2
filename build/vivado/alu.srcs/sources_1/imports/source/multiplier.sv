/*
    This file was generated automatically by Alchitry Labs 2.0.18-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/
module multiplier (
    input [(32)-1:0] a,
    input [(32)-1:0] b,
    output reg [(32)-1:0] mul
  );
  
  
  reg [(9)-1:0] current_row_fa_index;
  reg [(9)-1:0] previous_row_fa_index;
  reg [(5):0] R_0a866433_i, RR_0a866433_i;
  reg [(5):0] R_0b034032_i, RR_0b034032_i;
  reg [(32):0] R_02b31b0d_j, RR_02b31b0d_j;
  
  wire [(496)-1:0] M_fa_s;
  wire [(496)-1:0] M_fa_cout;
  reg [(496)-1:0] M_fa_a;
  reg [(496)-1:0] M_fa_b;
  reg [(496)-1:0] M_fa_cin;
  
  genvar idx_0_1890728423;
  
  generate
    for (idx_0_1890728423 = 0; idx_0_1890728423 < 496; idx_0_1890728423 = idx_0_1890728423 + 1) begin: forLoop_idx_0_1890728423
      fa fa_idx_0_1890728423 (
        .s(M_fa_s[(idx_0_1890728423)]),
        .cout(M_fa_cout[(idx_0_1890728423)]),
        .a(M_fa_a[(idx_0_1890728423)]),
        .b(M_fa_b[(idx_0_1890728423)]),
        .cin(M_fa_cin[(idx_0_1890728423)])
      );
    end
  endgenerate
  
  
  always @* begin
    mul[(1'h0)] = b[(1'h0)] & a[(1'h0)];
    for (RR_0a866433_i = 0; RR_0a866433_i < 5'h1f; RR_0a866433_i = RR_0a866433_i + 1) begin
      R_0a866433_i = (0) + RR_0a866433_i * (1);
      M_fa_a[(R_0a866433_i)] = a[(R_0a866433_i)] & b[(1'h1)];
      M_fa_b[(R_0a866433_i)] = a[(R_0a866433_i + 1'h1)] & b[(1'h0)];
      if (R_0a866433_i == 1'h0) begin
        M_fa_cin[(R_0a866433_i)] = 1'h0;
      end else begin
        M_fa_cin[(R_0a866433_i)] = M_fa_cout[(R_0a866433_i - 1'h1)];
      end
    end
    previous_row_fa_index = 1'h0;
    current_row_fa_index = 5'h1f;
    mul[(1'h1)] = M_fa_s[(previous_row_fa_index)];
    for (RR_0b034032_i = 0; RR_0b034032_i < 5'h1d; RR_0b034032_i = RR_0b034032_i + 1) begin
      R_0b034032_i = (2'h2) + RR_0b034032_i * (1);
      for (RR_02b31b0d_j = 0; RR_02b31b0d_j < 6'h20 - R_0b034032_i; RR_02b31b0d_j = RR_02b31b0d_j + 1) begin
        R_02b31b0d_j = (0) + RR_02b31b0d_j * (1);
        M_fa_a[(current_row_fa_index + R_02b31b0d_j)] = a[(R_02b31b0d_j)] & b[(R_0b034032_i)];
        M_fa_b[(current_row_fa_index + R_02b31b0d_j)] = M_fa_s[(previous_row_fa_index + 1'h1 + R_02b31b0d_j)];
        if (R_02b31b0d_j == 1'h0) begin
          M_fa_cin[(current_row_fa_index + R_02b31b0d_j)] = 1'h0;
        end else begin
          M_fa_cin[(current_row_fa_index + R_02b31b0d_j)] = M_fa_cout[(current_row_fa_index + R_02b31b0d_j - 1'h1)];
        end
      end
      previous_row_fa_index = current_row_fa_index;
      current_row_fa_index = current_row_fa_index + 6'h20 - R_0b034032_i;
      mul[(R_0b034032_i)] = M_fa_s[(previous_row_fa_index)];
    end
    M_fa_a[(9'h1ef)] = a[(1'h0)] & b[(5'h1f)];
    M_fa_b[(9'h1ef)] = M_fa_s[(9'h1ee)];
    M_fa_cin[(9'h1ef)] = 1'h0;
    mul[(5'h1f)] = M_fa_s[(9'h1ef)];
  end
  
endmodule