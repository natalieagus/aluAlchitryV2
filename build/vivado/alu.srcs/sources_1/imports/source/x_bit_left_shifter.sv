/*
    This file was generated automatically by Alchitry Labs 2.0.18-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/
module x_bit_left_shifter #(
    parameter SHIFT = 4'h8,
    parameter SIZE = 6'h20
  ) (
    input [(SIZE)-1:0] a,
    input do_shift,
    input pad,
    output reg [(SIZE)-1:0] out
  );
  
  
  reg [(SIZE)-1:0] in_1shift_unit;
  reg [(32):0] R_77e8f73e_i, RR_77e8f73e_i;
  
  reg [(SIZE)-1:0] M_shift_unit_s0;
  reg [(SIZE * (2))-1:0] M_shift_unit_in;
  wire [(SIZE)-1:0] M_shift_unit_out;
  
  genvar idx_0_285722399;
  
  generate
    for (idx_0_285722399 = 0; idx_0_285722399 < SIZE; idx_0_285722399 = idx_0_285722399 + 1) begin: forLoop_idx_0_285722399
      mux2 shift_unit_idx_0_285722399 (
        .s0(M_shift_unit_s0[(idx_0_285722399)]),
        .in(M_shift_unit_in[(idx_0_285722399 * (2)) + (2)-1-:(2)]),
        .out(M_shift_unit_out[(idx_0_285722399)])
      );
    end
  endgenerate
  
  
  always @* begin
    M_shift_unit_s0 = {SIZE{do_shift}};
    in_1shift_unit = {a[(1'h0)+((SIZE - 1'h1 - SHIFT)-(1'h0)+1) - 1 -:((SIZE - 1'h1 - SHIFT)-(1'h0)+1)], {SHIFT{pad}}};
    for (RR_77e8f73e_i = 0; RR_77e8f73e_i < SIZE; RR_77e8f73e_i = RR_77e8f73e_i + 1) begin
      R_77e8f73e_i = (0) + RR_77e8f73e_i * (1);
      M_shift_unit_in[(R_77e8f73e_i)*(2)+(2) - 1 -:(2)] = {in_1shift_unit[(R_77e8f73e_i)], a[(R_77e8f73e_i)]};
    end
    out = M_shift_unit_out;
  end
  
endmodule