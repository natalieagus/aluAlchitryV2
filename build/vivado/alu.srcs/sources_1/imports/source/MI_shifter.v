/*
    This file was generated automatically by Alchitry Labs 2.0.11-PREVIEW.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/
module MI_shifter (
    input [31:0] P_a,
    input [4:0] P_b,
    input [5:0] P_alufnSignal,
    output reg [31:0] P_shift
  );
  
  
  reg arith;
  reg [5:0] R_1a974b16_i;
  reg [5:0] R_6db3263f_j;
  
  reg [31:0] M_leftShifter_a;
  reg [4:0] M_leftShifter_b;
  reg M_leftShifter_pad;
  wire [31:0] M_leftShifter_shl;
  MI_leftShifter leftShifter (
    .P_a(M_leftShifter_a),
    .P_b(M_leftShifter_b),
    .P_pad(M_leftShifter_pad),
    .P_shl(M_leftShifter_shl)
  );
  reg [31:0] M_bitReverse32In_in;
  wire [31:0] M_bitReverse32In_reversed;
  MI_bitReverse_782e3138 bitReverse32In (
    .P_in(M_bitReverse32In_in),
    .P_reversed(M_bitReverse32In_reversed)
  );
  reg [31:0] M_bitReverse32Out_in;
  wire [31:0] M_bitReverse32Out_reversed;
  MI_bitReverse_782e3138 bitReverse32Out (
    .P_in(M_bitReverse32Out_in),
    .P_reversed(M_bitReverse32Out_reversed)
  );
  reg [31:0] M_chooseReverse_s0;
  reg [63:0] M_chooseReverse_in;
  wire [31:0] M_chooseReverse_out;
  MI_mux2 chooseReverse_0 (
    .P_s0(M_chooseReverse_s0[0]),
    .P_in(M_chooseReverse_in[1-:2]),
    .P_out(M_chooseReverse_out[0])
  );
  MI_mux2 chooseReverse_1 (
    .P_s0(M_chooseReverse_s0[1]),
    .P_in(M_chooseReverse_in[3-:2]),
    .P_out(M_chooseReverse_out[1])
  );
  MI_mux2 chooseReverse_2 (
    .P_s0(M_chooseReverse_s0[2]),
    .P_in(M_chooseReverse_in[5-:2]),
    .P_out(M_chooseReverse_out[2])
  );
  MI_mux2 chooseReverse_3 (
    .P_s0(M_chooseReverse_s0[3]),
    .P_in(M_chooseReverse_in[7-:2]),
    .P_out(M_chooseReverse_out[3])
  );
  MI_mux2 chooseReverse_4 (
    .P_s0(M_chooseReverse_s0[4]),
    .P_in(M_chooseReverse_in[9-:2]),
    .P_out(M_chooseReverse_out[4])
  );
  MI_mux2 chooseReverse_5 (
    .P_s0(M_chooseReverse_s0[5]),
    .P_in(M_chooseReverse_in[11-:2]),
    .P_out(M_chooseReverse_out[5])
  );
  MI_mux2 chooseReverse_6 (
    .P_s0(M_chooseReverse_s0[6]),
    .P_in(M_chooseReverse_in[13-:2]),
    .P_out(M_chooseReverse_out[6])
  );
  MI_mux2 chooseReverse_7 (
    .P_s0(M_chooseReverse_s0[7]),
    .P_in(M_chooseReverse_in[15-:2]),
    .P_out(M_chooseReverse_out[7])
  );
  MI_mux2 chooseReverse_8 (
    .P_s0(M_chooseReverse_s0[8]),
    .P_in(M_chooseReverse_in[17-:2]),
    .P_out(M_chooseReverse_out[8])
  );
  MI_mux2 chooseReverse_9 (
    .P_s0(M_chooseReverse_s0[9]),
    .P_in(M_chooseReverse_in[19-:2]),
    .P_out(M_chooseReverse_out[9])
  );
  MI_mux2 chooseReverse_10 (
    .P_s0(M_chooseReverse_s0[10]),
    .P_in(M_chooseReverse_in[21-:2]),
    .P_out(M_chooseReverse_out[10])
  );
  MI_mux2 chooseReverse_11 (
    .P_s0(M_chooseReverse_s0[11]),
    .P_in(M_chooseReverse_in[23-:2]),
    .P_out(M_chooseReverse_out[11])
  );
  MI_mux2 chooseReverse_12 (
    .P_s0(M_chooseReverse_s0[12]),
    .P_in(M_chooseReverse_in[25-:2]),
    .P_out(M_chooseReverse_out[12])
  );
  MI_mux2 chooseReverse_13 (
    .P_s0(M_chooseReverse_s0[13]),
    .P_in(M_chooseReverse_in[27-:2]),
    .P_out(M_chooseReverse_out[13])
  );
  MI_mux2 chooseReverse_14 (
    .P_s0(M_chooseReverse_s0[14]),
    .P_in(M_chooseReverse_in[29-:2]),
    .P_out(M_chooseReverse_out[14])
  );
  MI_mux2 chooseReverse_15 (
    .P_s0(M_chooseReverse_s0[15]),
    .P_in(M_chooseReverse_in[31-:2]),
    .P_out(M_chooseReverse_out[15])
  );
  MI_mux2 chooseReverse_16 (
    .P_s0(M_chooseReverse_s0[16]),
    .P_in(M_chooseReverse_in[33-:2]),
    .P_out(M_chooseReverse_out[16])
  );
  MI_mux2 chooseReverse_17 (
    .P_s0(M_chooseReverse_s0[17]),
    .P_in(M_chooseReverse_in[35-:2]),
    .P_out(M_chooseReverse_out[17])
  );
  MI_mux2 chooseReverse_18 (
    .P_s0(M_chooseReverse_s0[18]),
    .P_in(M_chooseReverse_in[37-:2]),
    .P_out(M_chooseReverse_out[18])
  );
  MI_mux2 chooseReverse_19 (
    .P_s0(M_chooseReverse_s0[19]),
    .P_in(M_chooseReverse_in[39-:2]),
    .P_out(M_chooseReverse_out[19])
  );
  MI_mux2 chooseReverse_20 (
    .P_s0(M_chooseReverse_s0[20]),
    .P_in(M_chooseReverse_in[41-:2]),
    .P_out(M_chooseReverse_out[20])
  );
  MI_mux2 chooseReverse_21 (
    .P_s0(M_chooseReverse_s0[21]),
    .P_in(M_chooseReverse_in[43-:2]),
    .P_out(M_chooseReverse_out[21])
  );
  MI_mux2 chooseReverse_22 (
    .P_s0(M_chooseReverse_s0[22]),
    .P_in(M_chooseReverse_in[45-:2]),
    .P_out(M_chooseReverse_out[22])
  );
  MI_mux2 chooseReverse_23 (
    .P_s0(M_chooseReverse_s0[23]),
    .P_in(M_chooseReverse_in[47-:2]),
    .P_out(M_chooseReverse_out[23])
  );
  MI_mux2 chooseReverse_24 (
    .P_s0(M_chooseReverse_s0[24]),
    .P_in(M_chooseReverse_in[49-:2]),
    .P_out(M_chooseReverse_out[24])
  );
  MI_mux2 chooseReverse_25 (
    .P_s0(M_chooseReverse_s0[25]),
    .P_in(M_chooseReverse_in[51-:2]),
    .P_out(M_chooseReverse_out[25])
  );
  MI_mux2 chooseReverse_26 (
    .P_s0(M_chooseReverse_s0[26]),
    .P_in(M_chooseReverse_in[53-:2]),
    .P_out(M_chooseReverse_out[26])
  );
  MI_mux2 chooseReverse_27 (
    .P_s0(M_chooseReverse_s0[27]),
    .P_in(M_chooseReverse_in[55-:2]),
    .P_out(M_chooseReverse_out[27])
  );
  MI_mux2 chooseReverse_28 (
    .P_s0(M_chooseReverse_s0[28]),
    .P_in(M_chooseReverse_in[57-:2]),
    .P_out(M_chooseReverse_out[28])
  );
  MI_mux2 chooseReverse_29 (
    .P_s0(M_chooseReverse_s0[29]),
    .P_in(M_chooseReverse_in[59-:2]),
    .P_out(M_chooseReverse_out[29])
  );
  MI_mux2 chooseReverse_30 (
    .P_s0(M_chooseReverse_s0[30]),
    .P_in(M_chooseReverse_in[61-:2]),
    .P_out(M_chooseReverse_out[30])
  );
  MI_mux2 chooseReverse_31 (
    .P_s0(M_chooseReverse_s0[31]),
    .P_in(M_chooseReverse_in[63-:2]),
    .P_out(M_chooseReverse_out[31])
  );
  reg [31:0] M_chooseLeftRight_s0;
  reg [63:0] M_chooseLeftRight_in;
  wire [31:0] M_chooseLeftRight_out;
  MI_mux2 chooseLeftRight_0 (
    .P_s0(M_chooseLeftRight_s0[0]),
    .P_in(M_chooseLeftRight_in[1-:2]),
    .P_out(M_chooseLeftRight_out[0])
  );
  MI_mux2 chooseLeftRight_1 (
    .P_s0(M_chooseLeftRight_s0[1]),
    .P_in(M_chooseLeftRight_in[3-:2]),
    .P_out(M_chooseLeftRight_out[1])
  );
  MI_mux2 chooseLeftRight_2 (
    .P_s0(M_chooseLeftRight_s0[2]),
    .P_in(M_chooseLeftRight_in[5-:2]),
    .P_out(M_chooseLeftRight_out[2])
  );
  MI_mux2 chooseLeftRight_3 (
    .P_s0(M_chooseLeftRight_s0[3]),
    .P_in(M_chooseLeftRight_in[7-:2]),
    .P_out(M_chooseLeftRight_out[3])
  );
  MI_mux2 chooseLeftRight_4 (
    .P_s0(M_chooseLeftRight_s0[4]),
    .P_in(M_chooseLeftRight_in[9-:2]),
    .P_out(M_chooseLeftRight_out[4])
  );
  MI_mux2 chooseLeftRight_5 (
    .P_s0(M_chooseLeftRight_s0[5]),
    .P_in(M_chooseLeftRight_in[11-:2]),
    .P_out(M_chooseLeftRight_out[5])
  );
  MI_mux2 chooseLeftRight_6 (
    .P_s0(M_chooseLeftRight_s0[6]),
    .P_in(M_chooseLeftRight_in[13-:2]),
    .P_out(M_chooseLeftRight_out[6])
  );
  MI_mux2 chooseLeftRight_7 (
    .P_s0(M_chooseLeftRight_s0[7]),
    .P_in(M_chooseLeftRight_in[15-:2]),
    .P_out(M_chooseLeftRight_out[7])
  );
  MI_mux2 chooseLeftRight_8 (
    .P_s0(M_chooseLeftRight_s0[8]),
    .P_in(M_chooseLeftRight_in[17-:2]),
    .P_out(M_chooseLeftRight_out[8])
  );
  MI_mux2 chooseLeftRight_9 (
    .P_s0(M_chooseLeftRight_s0[9]),
    .P_in(M_chooseLeftRight_in[19-:2]),
    .P_out(M_chooseLeftRight_out[9])
  );
  MI_mux2 chooseLeftRight_10 (
    .P_s0(M_chooseLeftRight_s0[10]),
    .P_in(M_chooseLeftRight_in[21-:2]),
    .P_out(M_chooseLeftRight_out[10])
  );
  MI_mux2 chooseLeftRight_11 (
    .P_s0(M_chooseLeftRight_s0[11]),
    .P_in(M_chooseLeftRight_in[23-:2]),
    .P_out(M_chooseLeftRight_out[11])
  );
  MI_mux2 chooseLeftRight_12 (
    .P_s0(M_chooseLeftRight_s0[12]),
    .P_in(M_chooseLeftRight_in[25-:2]),
    .P_out(M_chooseLeftRight_out[12])
  );
  MI_mux2 chooseLeftRight_13 (
    .P_s0(M_chooseLeftRight_s0[13]),
    .P_in(M_chooseLeftRight_in[27-:2]),
    .P_out(M_chooseLeftRight_out[13])
  );
  MI_mux2 chooseLeftRight_14 (
    .P_s0(M_chooseLeftRight_s0[14]),
    .P_in(M_chooseLeftRight_in[29-:2]),
    .P_out(M_chooseLeftRight_out[14])
  );
  MI_mux2 chooseLeftRight_15 (
    .P_s0(M_chooseLeftRight_s0[15]),
    .P_in(M_chooseLeftRight_in[31-:2]),
    .P_out(M_chooseLeftRight_out[15])
  );
  MI_mux2 chooseLeftRight_16 (
    .P_s0(M_chooseLeftRight_s0[16]),
    .P_in(M_chooseLeftRight_in[33-:2]),
    .P_out(M_chooseLeftRight_out[16])
  );
  MI_mux2 chooseLeftRight_17 (
    .P_s0(M_chooseLeftRight_s0[17]),
    .P_in(M_chooseLeftRight_in[35-:2]),
    .P_out(M_chooseLeftRight_out[17])
  );
  MI_mux2 chooseLeftRight_18 (
    .P_s0(M_chooseLeftRight_s0[18]),
    .P_in(M_chooseLeftRight_in[37-:2]),
    .P_out(M_chooseLeftRight_out[18])
  );
  MI_mux2 chooseLeftRight_19 (
    .P_s0(M_chooseLeftRight_s0[19]),
    .P_in(M_chooseLeftRight_in[39-:2]),
    .P_out(M_chooseLeftRight_out[19])
  );
  MI_mux2 chooseLeftRight_20 (
    .P_s0(M_chooseLeftRight_s0[20]),
    .P_in(M_chooseLeftRight_in[41-:2]),
    .P_out(M_chooseLeftRight_out[20])
  );
  MI_mux2 chooseLeftRight_21 (
    .P_s0(M_chooseLeftRight_s0[21]),
    .P_in(M_chooseLeftRight_in[43-:2]),
    .P_out(M_chooseLeftRight_out[21])
  );
  MI_mux2 chooseLeftRight_22 (
    .P_s0(M_chooseLeftRight_s0[22]),
    .P_in(M_chooseLeftRight_in[45-:2]),
    .P_out(M_chooseLeftRight_out[22])
  );
  MI_mux2 chooseLeftRight_23 (
    .P_s0(M_chooseLeftRight_s0[23]),
    .P_in(M_chooseLeftRight_in[47-:2]),
    .P_out(M_chooseLeftRight_out[23])
  );
  MI_mux2 chooseLeftRight_24 (
    .P_s0(M_chooseLeftRight_s0[24]),
    .P_in(M_chooseLeftRight_in[49-:2]),
    .P_out(M_chooseLeftRight_out[24])
  );
  MI_mux2 chooseLeftRight_25 (
    .P_s0(M_chooseLeftRight_s0[25]),
    .P_in(M_chooseLeftRight_in[51-:2]),
    .P_out(M_chooseLeftRight_out[25])
  );
  MI_mux2 chooseLeftRight_26 (
    .P_s0(M_chooseLeftRight_s0[26]),
    .P_in(M_chooseLeftRight_in[53-:2]),
    .P_out(M_chooseLeftRight_out[26])
  );
  MI_mux2 chooseLeftRight_27 (
    .P_s0(M_chooseLeftRight_s0[27]),
    .P_in(M_chooseLeftRight_in[55-:2]),
    .P_out(M_chooseLeftRight_out[27])
  );
  MI_mux2 chooseLeftRight_28 (
    .P_s0(M_chooseLeftRight_s0[28]),
    .P_in(M_chooseLeftRight_in[57-:2]),
    .P_out(M_chooseLeftRight_out[28])
  );
  MI_mux2 chooseLeftRight_29 (
    .P_s0(M_chooseLeftRight_s0[29]),
    .P_in(M_chooseLeftRight_in[59-:2]),
    .P_out(M_chooseLeftRight_out[29])
  );
  MI_mux2 chooseLeftRight_30 (
    .P_s0(M_chooseLeftRight_s0[30]),
    .P_in(M_chooseLeftRight_in[61-:2]),
    .P_out(M_chooseLeftRight_out[30])
  );
  MI_mux2 chooseLeftRight_31 (
    .P_s0(M_chooseLeftRight_s0[31]),
    .P_in(M_chooseLeftRight_in[63-:2]),
    .P_out(M_chooseLeftRight_out[31])
  );
  
  always @* begin
    M_bitReverse32In_in = P_a;
    M_chooseReverse_s0 = {6'h20{P_alufnSignal[(1'h0)]}};
    M_chooseLeftRight_s0 = {6'h20{P_alufnSignal[(1'h0)]}};
    for (R_1a974b16_i = 0; R_1a974b16_i < (0) + (6'h20) * (1); R_1a974b16_i = R_1a974b16_i + (1)) begin
      M_chooseReverse_in[(R_1a974b16_i)*2+1-:2] = {M_bitReverse32In_reversed[(R_1a974b16_i)], P_a[(R_1a974b16_i)]};
    end
    arith = 1'h0;
    if (P_alufnSignal[(1'h1)]) begin
      arith = 1'h1;
    end
    M_leftShifter_b = P_b;
    M_leftShifter_a = M_chooseReverse_out;
    M_leftShifter_pad = arith;
    M_bitReverse32Out_in = M_leftShifter_shl;
    for (R_6db3263f_j = 0; R_6db3263f_j < (0) + (6'h20) * (1); R_6db3263f_j = R_6db3263f_j + (1)) begin
      M_chooseLeftRight_in[(R_6db3263f_j)*2+1-:2] = {M_bitReverse32Out_reversed[(R_6db3263f_j)], M_leftShifter_shl[(R_6db3263f_j)]};
    end
    P_shift = M_chooseLeftRight_out;
  end
  
endmodule