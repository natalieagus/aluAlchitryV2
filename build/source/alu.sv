/*
    This file was generated automatically by Alchitry Labs 2.0.18-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/
module alu (
    input [(32)-1:0] a,
    input [(32)-1:0] b,
    input [(6)-1:0] alufn_signal,
    output reg [(32)-1:0] out,
    output reg z,
    output reg v,
    output reg n
  );
  
  
  reg [(32)-1:0] arith;
  
  localparam _MP_SIZE_1490650410 = 6'h20;
  reg [(32)-1:0] M_adder_a;
  reg [(32)-1:0] M_adder_b;
  reg [(6)-1:0] M_adder_alufn_signal;
  wire [(32)-1:0] M_adder_out;
  wire M_adder_z;
  wire M_adder_v;
  wire M_adder_n;
  
  adder #(
    .SIZE(_MP_SIZE_1490650410)
  ) adder (
    .a(M_adder_a),
    .b(M_adder_b),
    .alufn_signal(M_adder_alufn_signal),
    .out(M_adder_out),
    .z(M_adder_z),
    .v(M_adder_v),
    .n(M_adder_n)
  );
  
  localparam _MP_SIZE_1533382614 = 6'h20;
  reg [(32)-1:0] M_boolean_a;
  reg [(32)-1:0] M_boolean_b;
  reg [(6)-1:0] M_boolean_alufn_signal;
  wire [(32)-1:0] M_boolean_bool;
  
  boolean #(
    .SIZE(_MP_SIZE_1533382614)
  ) boolean (
    .a(M_boolean_a),
    .b(M_boolean_b),
    .alufn_signal(M_boolean_alufn_signal),
    .bool(M_boolean_bool)
  );
  
  reg [(32)-1:0] M_shifter_a;
  reg [(5)-1:0] M_shifter_b;
  reg [(6)-1:0] M_shifter_alufn_signal;
  wire [(32)-1:0] M_shifter_shift;
  
  shifter shifter (
    .a(M_shifter_a),
    .b(M_shifter_b),
    .alufn_signal(M_shifter_alufn_signal),
    .shift(M_shifter_shift)
  );
  
  reg M_compare_z;
  reg M_compare_v;
  reg M_compare_n;
  reg [(6)-1:0] M_compare_alufn_signal;
  wire M_compare_cmp;
  
  compare compare (
    .z(M_compare_z),
    .v(M_compare_v),
    .n(M_compare_n),
    .alufn_signal(M_compare_alufn_signal),
    .cmp(M_compare_cmp)
  );
  
  reg [(32)-1:0] M_multiplier_a;
  reg [(32)-1:0] M_multiplier_b;
  wire [(32)-1:0] M_multiplier_mul;
  
  multiplier multiplier (
    .a(M_multiplier_a),
    .b(M_multiplier_b),
    .mul(M_multiplier_mul)
  );
  
  
  always @* begin
    M_adder_a = a;
    M_adder_b = b;
    M_adder_alufn_signal = alufn_signal;
    M_multiplier_a = a;
    M_multiplier_b = b;
    M_boolean_a = a;
    M_boolean_b = b;
    M_boolean_alufn_signal = alufn_signal;
    M_shifter_a = a;
    M_shifter_b = b[(1'h0)+((3'h4)-(1'h0)+1) - 1 -:((3'h4)-(1'h0)+1)];
    M_shifter_alufn_signal = alufn_signal;
    M_compare_z = M_adder_z;
    M_compare_v = M_adder_v;
    M_compare_n = M_adder_n;
    z = M_adder_z;
    v = M_adder_v;
    n = M_adder_n;
    M_compare_alufn_signal = alufn_signal;
    arith = M_adder_out;
    if (alufn_signal[(1'h1)]) begin
      arith = M_multiplier_mul;
    end
    
    case (alufn_signal[(3'h4)+((3'h5)-(3'h4)+1) - 1 -:((3'h5)-(3'h4)+1)])
      2'h0: begin
        out = arith;
      end
      2'h1: begin
        out = M_boolean_bool;
      end
      2'h2: begin
        out = M_shifter_shift;
      end
      2'h3: begin
        out = {31'h0, M_compare_cmp};
      end
      default: begin
        out = 32'h0;
      end
    endcase
  end
  
endmodule