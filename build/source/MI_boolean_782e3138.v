/*
    This file was generated automatically by Alchitry Labs 2.0.11-PREVIEW.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/
/*
  Parameters:
      SIZE = {100000} : 32
*/
module MI_boolean_782e3138 (
    input [31:0] P_a,
    input [31:0] P_b,
    input [5:0] P_alufnSignal,
    output reg [31:0] P_bool
  );
  localparam P_SIZE = 6'h20;
  
  
  
  reg [31:0] M_mux_4_SIZE_s0;
  reg [31:0] M_mux_4_SIZE_s1;
  reg [127:0] M_mux_4_SIZE_in;
  wire [31:0] M_mux_4_SIZE_out;
  MI_mux4 mux_4_SIZE_0 (
    .P_s0(M_mux_4_SIZE_s0[0]),
    .P_s1(M_mux_4_SIZE_s1[0]),
    .P_in(M_mux_4_SIZE_in[3-:4]),
    .P_out(M_mux_4_SIZE_out[0])
  );
  MI_mux4 mux_4_SIZE_1 (
    .P_s0(M_mux_4_SIZE_s0[1]),
    .P_s1(M_mux_4_SIZE_s1[1]),
    .P_in(M_mux_4_SIZE_in[7-:4]),
    .P_out(M_mux_4_SIZE_out[1])
  );
  MI_mux4 mux_4_SIZE_2 (
    .P_s0(M_mux_4_SIZE_s0[2]),
    .P_s1(M_mux_4_SIZE_s1[2]),
    .P_in(M_mux_4_SIZE_in[11-:4]),
    .P_out(M_mux_4_SIZE_out[2])
  );
  MI_mux4 mux_4_SIZE_3 (
    .P_s0(M_mux_4_SIZE_s0[3]),
    .P_s1(M_mux_4_SIZE_s1[3]),
    .P_in(M_mux_4_SIZE_in[15-:4]),
    .P_out(M_mux_4_SIZE_out[3])
  );
  MI_mux4 mux_4_SIZE_4 (
    .P_s0(M_mux_4_SIZE_s0[4]),
    .P_s1(M_mux_4_SIZE_s1[4]),
    .P_in(M_mux_4_SIZE_in[19-:4]),
    .P_out(M_mux_4_SIZE_out[4])
  );
  MI_mux4 mux_4_SIZE_5 (
    .P_s0(M_mux_4_SIZE_s0[5]),
    .P_s1(M_mux_4_SIZE_s1[5]),
    .P_in(M_mux_4_SIZE_in[23-:4]),
    .P_out(M_mux_4_SIZE_out[5])
  );
  MI_mux4 mux_4_SIZE_6 (
    .P_s0(M_mux_4_SIZE_s0[6]),
    .P_s1(M_mux_4_SIZE_s1[6]),
    .P_in(M_mux_4_SIZE_in[27-:4]),
    .P_out(M_mux_4_SIZE_out[6])
  );
  MI_mux4 mux_4_SIZE_7 (
    .P_s0(M_mux_4_SIZE_s0[7]),
    .P_s1(M_mux_4_SIZE_s1[7]),
    .P_in(M_mux_4_SIZE_in[31-:4]),
    .P_out(M_mux_4_SIZE_out[7])
  );
  MI_mux4 mux_4_SIZE_8 (
    .P_s0(M_mux_4_SIZE_s0[8]),
    .P_s1(M_mux_4_SIZE_s1[8]),
    .P_in(M_mux_4_SIZE_in[35-:4]),
    .P_out(M_mux_4_SIZE_out[8])
  );
  MI_mux4 mux_4_SIZE_9 (
    .P_s0(M_mux_4_SIZE_s0[9]),
    .P_s1(M_mux_4_SIZE_s1[9]),
    .P_in(M_mux_4_SIZE_in[39-:4]),
    .P_out(M_mux_4_SIZE_out[9])
  );
  MI_mux4 mux_4_SIZE_10 (
    .P_s0(M_mux_4_SIZE_s0[10]),
    .P_s1(M_mux_4_SIZE_s1[10]),
    .P_in(M_mux_4_SIZE_in[43-:4]),
    .P_out(M_mux_4_SIZE_out[10])
  );
  MI_mux4 mux_4_SIZE_11 (
    .P_s0(M_mux_4_SIZE_s0[11]),
    .P_s1(M_mux_4_SIZE_s1[11]),
    .P_in(M_mux_4_SIZE_in[47-:4]),
    .P_out(M_mux_4_SIZE_out[11])
  );
  MI_mux4 mux_4_SIZE_12 (
    .P_s0(M_mux_4_SIZE_s0[12]),
    .P_s1(M_mux_4_SIZE_s1[12]),
    .P_in(M_mux_4_SIZE_in[51-:4]),
    .P_out(M_mux_4_SIZE_out[12])
  );
  MI_mux4 mux_4_SIZE_13 (
    .P_s0(M_mux_4_SIZE_s0[13]),
    .P_s1(M_mux_4_SIZE_s1[13]),
    .P_in(M_mux_4_SIZE_in[55-:4]),
    .P_out(M_mux_4_SIZE_out[13])
  );
  MI_mux4 mux_4_SIZE_14 (
    .P_s0(M_mux_4_SIZE_s0[14]),
    .P_s1(M_mux_4_SIZE_s1[14]),
    .P_in(M_mux_4_SIZE_in[59-:4]),
    .P_out(M_mux_4_SIZE_out[14])
  );
  MI_mux4 mux_4_SIZE_15 (
    .P_s0(M_mux_4_SIZE_s0[15]),
    .P_s1(M_mux_4_SIZE_s1[15]),
    .P_in(M_mux_4_SIZE_in[63-:4]),
    .P_out(M_mux_4_SIZE_out[15])
  );
  MI_mux4 mux_4_SIZE_16 (
    .P_s0(M_mux_4_SIZE_s0[16]),
    .P_s1(M_mux_4_SIZE_s1[16]),
    .P_in(M_mux_4_SIZE_in[67-:4]),
    .P_out(M_mux_4_SIZE_out[16])
  );
  MI_mux4 mux_4_SIZE_17 (
    .P_s0(M_mux_4_SIZE_s0[17]),
    .P_s1(M_mux_4_SIZE_s1[17]),
    .P_in(M_mux_4_SIZE_in[71-:4]),
    .P_out(M_mux_4_SIZE_out[17])
  );
  MI_mux4 mux_4_SIZE_18 (
    .P_s0(M_mux_4_SIZE_s0[18]),
    .P_s1(M_mux_4_SIZE_s1[18]),
    .P_in(M_mux_4_SIZE_in[75-:4]),
    .P_out(M_mux_4_SIZE_out[18])
  );
  MI_mux4 mux_4_SIZE_19 (
    .P_s0(M_mux_4_SIZE_s0[19]),
    .P_s1(M_mux_4_SIZE_s1[19]),
    .P_in(M_mux_4_SIZE_in[79-:4]),
    .P_out(M_mux_4_SIZE_out[19])
  );
  MI_mux4 mux_4_SIZE_20 (
    .P_s0(M_mux_4_SIZE_s0[20]),
    .P_s1(M_mux_4_SIZE_s1[20]),
    .P_in(M_mux_4_SIZE_in[83-:4]),
    .P_out(M_mux_4_SIZE_out[20])
  );
  MI_mux4 mux_4_SIZE_21 (
    .P_s0(M_mux_4_SIZE_s0[21]),
    .P_s1(M_mux_4_SIZE_s1[21]),
    .P_in(M_mux_4_SIZE_in[87-:4]),
    .P_out(M_mux_4_SIZE_out[21])
  );
  MI_mux4 mux_4_SIZE_22 (
    .P_s0(M_mux_4_SIZE_s0[22]),
    .P_s1(M_mux_4_SIZE_s1[22]),
    .P_in(M_mux_4_SIZE_in[91-:4]),
    .P_out(M_mux_4_SIZE_out[22])
  );
  MI_mux4 mux_4_SIZE_23 (
    .P_s0(M_mux_4_SIZE_s0[23]),
    .P_s1(M_mux_4_SIZE_s1[23]),
    .P_in(M_mux_4_SIZE_in[95-:4]),
    .P_out(M_mux_4_SIZE_out[23])
  );
  MI_mux4 mux_4_SIZE_24 (
    .P_s0(M_mux_4_SIZE_s0[24]),
    .P_s1(M_mux_4_SIZE_s1[24]),
    .P_in(M_mux_4_SIZE_in[99-:4]),
    .P_out(M_mux_4_SIZE_out[24])
  );
  MI_mux4 mux_4_SIZE_25 (
    .P_s0(M_mux_4_SIZE_s0[25]),
    .P_s1(M_mux_4_SIZE_s1[25]),
    .P_in(M_mux_4_SIZE_in[103-:4]),
    .P_out(M_mux_4_SIZE_out[25])
  );
  MI_mux4 mux_4_SIZE_26 (
    .P_s0(M_mux_4_SIZE_s0[26]),
    .P_s1(M_mux_4_SIZE_s1[26]),
    .P_in(M_mux_4_SIZE_in[107-:4]),
    .P_out(M_mux_4_SIZE_out[26])
  );
  MI_mux4 mux_4_SIZE_27 (
    .P_s0(M_mux_4_SIZE_s0[27]),
    .P_s1(M_mux_4_SIZE_s1[27]),
    .P_in(M_mux_4_SIZE_in[111-:4]),
    .P_out(M_mux_4_SIZE_out[27])
  );
  MI_mux4 mux_4_SIZE_28 (
    .P_s0(M_mux_4_SIZE_s0[28]),
    .P_s1(M_mux_4_SIZE_s1[28]),
    .P_in(M_mux_4_SIZE_in[115-:4]),
    .P_out(M_mux_4_SIZE_out[28])
  );
  MI_mux4 mux_4_SIZE_29 (
    .P_s0(M_mux_4_SIZE_s0[29]),
    .P_s1(M_mux_4_SIZE_s1[29]),
    .P_in(M_mux_4_SIZE_in[119-:4]),
    .P_out(M_mux_4_SIZE_out[29])
  );
  MI_mux4 mux_4_SIZE_30 (
    .P_s0(M_mux_4_SIZE_s0[30]),
    .P_s1(M_mux_4_SIZE_s1[30]),
    .P_in(M_mux_4_SIZE_in[123-:4]),
    .P_out(M_mux_4_SIZE_out[30])
  );
  MI_mux4 mux_4_SIZE_31 (
    .P_s0(M_mux_4_SIZE_s0[31]),
    .P_s1(M_mux_4_SIZE_s1[31]),
    .P_in(M_mux_4_SIZE_in[127-:4]),
    .P_out(M_mux_4_SIZE_out[31])
  );
  
  always @* begin
    M_mux_4_SIZE_s0 = P_a;
    M_mux_4_SIZE_s1 = P_b;
    M_mux_4_SIZE_in = {6'h20{{P_alufnSignal[(1'h0)+3-:4]}}};
    P_bool = M_mux_4_SIZE_out;
  end
  
endmodule