/*
    This file was generated automatically by Alchitry Labs 2.0.19-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alu_manual_tester #(
        parameter CLK_FREQ = 10'h3e8
    ) (
        input wire clk,
        input wire rst,
        input wire [4:0] io_button,
        input wire [2:0][7:0] io_dip,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select
    );
    localparam E_States_STORE_A = 3'h0;
    localparam E_States_STORE_B = 3'h1;
    localparam E_States_STORE_ALUFN = 3'h2;
    localparam E_States_COMPUTE = 3'h3;
    localparam E_States_DISPLAY = 3'h4;
    
    logic [15:0] D_dff_a_d, D_dff_a_q = 1'h0;
    logic [15:0] D_dff_b_d, D_dff_b_q = 1'h0;
    logic [5:0] D_dff_alufn_d, D_dff_alufn_q = 1'h0;
    logic [1:0] D_indicator_state_d, D_indicator_state_q = 2'h3;
    logic [18:0] D_output_alu_d, D_output_alu_q = 1'h0;
    logic [2:0] D_state_d, D_state_q = 3'h4;
    
    
    logic [31:0] M_alu_a;
    logic [31:0] M_alu_b;
    logic [5:0] M_alu_alufn_signal;
    logic [31:0] M_alu_out;
    logic M_alu_z;
    logic M_alu_v;
    logic M_alu_n;
    
    alu alu (
        .a(M_alu_a),
        .b(M_alu_b),
        .alufn_signal(M_alu_alufn_signal),
        .out(M_alu_out),
        .z(M_alu_z),
        .v(M_alu_v),
        .n(M_alu_n)
    );
    
    localparam _MP_CLK_FREQ_1742345030 = CLK_FREQ;
    localparam _MP_MIN_DELAY_1742345030 = 5'h14;
    localparam _MP_NUM_SYNC_1742345030 = 2'h2;
    logic M_next_in;
    logic M_next_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_1742345030),
        .MIN_DELAY(_MP_MIN_DELAY_1742345030),
        .NUM_SYNC(_MP_NUM_SYNC_1742345030)
    ) next (
        .clk(clk),
        .in(M_next_in),
        .out(M_next_out)
    );
    
    localparam _MP_RISE_684750161 = 1'h1;
    localparam _MP_FALL_684750161 = 1'h0;
    logic M_next_edge_in;
    logic M_next_edge_out;
    
    edge_detector #(
        .RISE(_MP_RISE_684750161),
        .FALL(_MP_FALL_684750161)
    ) next_edge (
        .clk(clk),
        .in(M_next_edge_in),
        .out(M_next_edge_out)
    );
    
    logic [2:0] M_seven_seg_alu_char;
    logic [6:0] M_seven_seg_alu_segs;
    
    seven_seg_alu seven_seg_alu (
        .char(M_seven_seg_alu_char),
        .segs(M_seven_seg_alu_segs)
    );
    
    
    always @* begin
        D_state_d = D_state_q;
        D_indicator_state_d = D_indicator_state_q;
        D_output_alu_d = D_output_alu_q;
        D_dff_a_d = D_dff_a_q;
        D_dff_b_d = D_dff_b_q;
        D_dff_alufn_d = D_dff_alufn_q;
        
        io_led = '{8'h0, 8'h0, 8'h0};
        M_next_in = io_button[1'h0];
        M_next_edge_in = M_next_out;
        D_state_d = D_state_q;
        D_indicator_state_d = D_indicator_state_q;
        D_output_alu_d = D_output_alu_q;
        if (M_next_edge_out) begin
            
            case (D_state_q)
                3'h0: begin
                    D_dff_a_d = {io_dip[1'h1], io_dip[1'h0]};
                    D_indicator_state_d = 2'h1;
                    D_state_d = 3'h1;
                end
                3'h1: begin
                    D_dff_b_d = {io_dip[1'h1], io_dip[1'h0]};
                    D_indicator_state_d = 2'h2;
                    D_state_d = 3'h2;
                end
                3'h2: begin
                    D_dff_alufn_d = io_dip[2'h2][3'h5:1'h0];
                    D_indicator_state_d = 2'h3;
                    D_state_d = 3'h3;
                end
                3'h3: begin
                    D_output_alu_d = {M_alu_z, M_alu_v, M_alu_n, M_alu_out[4'hf:1'h0]};
                    D_state_d = 3'h4;
                end
                3'h4: begin
                    D_indicator_state_d = 2'h0;
                    D_output_alu_d = 1'h0;
                    D_state_d = 3'h0;
                end
            endcase
        end
        M_alu_a = D_dff_a_q;
        M_alu_b = D_dff_b_q;
        M_alu_alufn_signal = D_dff_alufn_q;
        io_led[1'h1:1'h0] = {D_output_alu_q[4'hf:4'h8], D_output_alu_q[3'h7:1'h0]};
        io_led[2'h2][2'h2:1'h0] = D_output_alu_q[5'h12:5'h10];
        io_led[2'h2][3'h7:3'h6] = D_indicator_state_q;
        if (io_button[1'h1]) begin
            io_led[1'h1:1'h0] = {D_dff_a_q[4'hf:4'h8], D_dff_a_q[3'h7:1'h0]};
        end else begin
            if (io_button[2'h2]) begin
                io_led[1'h1:1'h0] = {D_dff_b_q[4'hf:4'h8], D_dff_b_q[3'h7:1'h0]};
            end else begin
                if (io_button[2'h3]) begin
                    io_led[1'h0] = D_dff_alufn_q;
                end
            end
        end
        M_seven_seg_alu_char = D_state_q;
        io_segment = ~M_seven_seg_alu_segs;
        io_select = 4'he;
    end
    
    always @(posedge (clk)) begin
        D_state_q <= D_state_d;
        if ((rst) == 1'b1) begin
            D_dff_a_q <= 1'h0;
            D_dff_b_q <= 1'h0;
            D_dff_alufn_q <= 1'h0;
            D_indicator_state_q <= 2'h3;
            D_output_alu_q <= 1'h0;
        end else begin
            D_dff_a_q <= D_dff_a_d;
            D_dff_b_q <= D_dff_b_d;
            D_dff_alufn_q <= D_dff_alufn_d;
            D_indicator_state_q <= D_indicator_state_d;
            D_output_alu_q <= D_output_alu_d;
        end
    end
endmodule