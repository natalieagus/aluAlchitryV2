/*
    This file was generated automatically by Alchitry Labs 2.0.18-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/
module boolean #(
    parameter SIZE = 6'h20
  ) (
    input [(SIZE)-1:0] a,
    input [(SIZE)-1:0] b,
    input [(6)-1:0] alufn_signal,
    output reg [(SIZE)-1:0] bool
  );
  
  
  
  reg [(SIZE)-1:0] M_mux_4_SIZE_s0;
  reg [(SIZE)-1:0] M_mux_4_SIZE_s1;
  reg [(SIZE * (4))-1:0] M_mux_4_SIZE_in;
  wire [(SIZE)-1:0] M_mux_4_SIZE_out;
  
  genvar idx_0_440966072;
  
  generate
    for (idx_0_440966072 = 0; idx_0_440966072 < SIZE; idx_0_440966072 = idx_0_440966072 + 1) begin: forLoop_idx_0_440966072
      mux4 mux_4_SIZE_idx_0_440966072 (
        .s0(M_mux_4_SIZE_s0[(idx_0_440966072)]),
        .s1(M_mux_4_SIZE_s1[(idx_0_440966072)]),
        .in(M_mux_4_SIZE_in[(idx_0_440966072 * (4)) + (4)-1-:(4)]),
        .out(M_mux_4_SIZE_out[(idx_0_440966072)])
      );
    end
  endgenerate
  
  
  always @* begin
    M_mux_4_SIZE_s0 = a;
    M_mux_4_SIZE_s1 = b;
    M_mux_4_SIZE_in = {SIZE{{alufn_signal[(1'h0)+((2'h3)-(1'h0)+1) - 1 -:((2'h3)-(1'h0)+1)]}}};
    bool = M_mux_4_SIZE_out;
  end
  
endmodule